{"version":3,"sources":["app/movies/components/MoviesContainer.js","app/movies/duck/types.js","app/movies/duck/actions.js","app/movies/components/MoviesForm.js","App.js","serviceWorker.js","app/actors/duck/types.js","app/actors/duck/reducers.js","app/actors/duck/index.js","app/movies/duck/reducers.js","app/movies/duck/index.js","reducers.js","store.js","index.js"],"names":["connect","state","movies","list","map","movie","item","type","types","index","dispatch","add","actions","update","reset","deleteItem","props","movieInput","React","createRef","indexInput","onSubmit","event","preventDefault","current","value","ref","onClick","console","log","App","className","Boolean","window","location","hostname","match","INITIAL_STATE","listname","actorsReducer","action","slice","concat","listName","moviesReducer","newList","rootReducer","combineReducers","actors","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1e68c3b.chunk.js","sourcesContent":["import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nconst MoviesContainer = ({movies}) => \r\n    <ul>\r\n        {movies.list.map(movie => <li>{movie}</li>)}\r\n    </ul>\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movies: state.movies\r\n  })\r\nexport default connect(mapStateToProps,{})(MoviesContainer)","const ADD_MOVIE = 'ADD_MOVIE'\r\nconst DELETE_MOVIE = 'DELETE_MOVIE'\r\nconst UPDATE_MOVIE = 'UPDATE_MOVIE'\r\nconst RESET_MOVIES = 'RESET_MOVIES'\r\n\r\nexport default {\r\n    ADD_MOVIE,\r\n    DELETE_MOVIE,\r\n    UPDATE_MOVIE,\r\n    RESET_MOVIES\r\n}","import types from './types'\r\n\r\nconst add = item => ({type: types.ADD_MOVIE, item})\r\nconst deleteItem = index => ({type: types.DELETE_MOVIE, index})\r\nconst update = (index, item) => ({type: types.UPDATE_MOVIE, index, item})\r\nconst reset = () => ({type: types.RESET_MOVIES})\r\n\r\nexport default {\r\n    add,\r\n    deleteItem,\r\n    update,\r\n    reset\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport actions from '../duck/actions'\r\n\r\nconst MoviesForm = (props) => {\r\n    const movieInput = React.createRef()\r\n    const indexInput = React.createRef()\r\n\r\n    const addMovie = (event) =>{\r\n        event.preventDefault()\r\n        props.add(movieInput.current.value)\r\n\r\n        movieInput.current.value = ''\r\n    }\r\n\r\n    const updateMovie = (event) =>{\r\n        event.preventDefault()\r\n        props.update(indexInput.current.value, movieInput.current.value)\r\n        console.log(indexInput.current.value, 'nowy: ', movieInput.current.value)\r\n    }\r\n    const resetMovies = () =>{\r\n        //event.preventDefault()\r\n        props.reset()\r\n    }\r\n    const deleteMovie = (event) =>{\r\n        event.preventDefault()\r\n        props.deleteItem(indexInput.current.value)\r\n        movieInput.current.value = ''\r\n    }\r\n//indexInput do pobierania indexu który ma być usunięty lub zeedytowany ;d\r\n    return   <form onSubmit={addMovie}>\r\n                <input ref={indexInput}/>\r\n                <input ref={movieInput} />\r\n                <button type='submit'>Add movie</button>\r\n                <button type='button' onClick={updateMovie}>update</button>\r\n                <button type='button' onClick={resetMovies}>Reset</button>\r\n                <button type='button' onClick={deleteMovie}>Delete</button>\r\n            </form> \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    add: movie => dispatch(actions.add(movie)),\r\n    update: (index,item) => dispatch(actions.update(index,item)),\r\n    reset: () => dispatch(actions.reset()),\r\n    deleteItem: index => dispatch(actions.deleteItem(index))\r\n})\r\nexport default connect(null,mapDispatchToProps)(MoviesForm)","/* eslint-disable no-lone-blocks */\nimport React from 'react';\nimport './App.css';\nimport MoviesContainer from './app/movies/components/MoviesContainer'\nimport MoviesForm from './app/movies/components/MoviesForm'\n\n/* import { createStore, bindActionCreators } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers'\nimport { movieActions } from './app/movies/duck'\nimport { actorActions } from './app/actors/duck'\n\n\nconst store = createStore(rootReducer, composeWithDevTools())\nwindow.store = store\n\nstore.dispatch(actorActions.add('Franek Kimono'))\nstore.dispatch(actorActions.update(0, 'Patryk Budnicki'))\n\nconst actorsActions = bindActionCreators({addActor, deleteActor, updateActor, resetActor}, store.dispatch)\n\nactorsActions.addActor('Katarzyna Mazurek')  */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MoviesContainer />\n      <MoviesForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const ADD_ACTOR = 'ADD_ACTOR'\r\nconst DELETE_ACTOR = 'DELETE_ACTOR'\r\nconst UPDATE_ACTOR = 'UPDATE_ACTOR'\r\nconst RESET_ACTORS = 'RESET_ACTORS'\r\n\r\nexport default {\r\n    ADD_ACTOR,\r\n    DELETE_ACTOR,\r\n    UPDATE_ACTOR,\r\n    RESET_ACTORS\r\n}","import types from './types'\r\n\r\nconst INITIAL_STATE = {\r\n    listname: 'Best',\r\n    list: [\r\n      'Gabriel Macht', 'Megan Fox', 'Mike Ross'\r\n    ]\r\n  }\r\n\r\n  const actorsReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n      case types.ADD_ACTOR:\r\n        return{\r\n          ...state, list: [...state.list, action.item]\r\n        }\r\n      case types.DELETE_ACTOR: {/* Dodatkowo sobie zrobiłem usuwanie :D */}\r\n        return{\r\n          ...state, list: [...state.list.slice(0,action.index).concat(...state.list.slice(action.index+1))]\r\n        }\r\n      case types.UPDATE_ACTOR: {/* oraz aktualizacje :D */}\r\n        return{\r\n          ...state, list: [...state.list.slice(0,action.index).concat(action.item).concat(...state.list.slice(action.index+1))]\r\n        }\r\n      case types.RESET_ACTORS:\r\n        return {\r\n          ...state, list: []\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\nexport default actorsReducer","import actorsReducer from './reducers'\r\nexport {default as actorTypes} from './types'\r\nexport {default as actorActions} from './actions'\r\n\r\n\r\nexport default actorsReducer","import types from './types'\r\n\r\nconst INITIAL_STATE = {\r\n    listName: 'Favourite',\r\n    list: [\r\n      \"Harry Potter\", \"Chłopaki nie płaczą\", \"Szybcy i Wściekli 7\"\r\n    ]\r\n  }\r\n\r\n  const moviesReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n      case types.ADD_MOVIE:\r\n        return{\r\n          ...state, list: [...state.list, action.item]\r\n        }\r\n      case types.DELETE_MOVIE: {/* Dodatkowo sobie zrobiłem usuwanie :D */}\r\n        return{\r\n          ...state, list: [...state.list.slice(0,action.index).concat(...state.list.slice(action.index+1))]\r\n        }\r\n     /* case types.UPDATE_MOVIE: {/* oraz aktualizacje :D }\r\n        return{\r\n          ...state, list: [...state.list.slice(0,action.index).concat(action.item).concat(...state.list.slice(action.index+1))]\r\n        } */\r\n      case types.UPDATE_MOVIE:\r\n        const newList = [...state.list];\r\n        newList[action.index] = action.item; \r\n        console.log('newlist', newList) // upewnij się ze wszystko gra (moze coś z akcja nie tak...) \r\n        return {\r\n          ...state, list: newList\r\n        }\r\n      case types.RESET_MOVIES:\r\n        return {\r\n          ...state, list: []\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\n  export default moviesReducer","import moviesReducer from './reducers'\r\nexport {default as movieTypes} from './types'\r\nexport {default as movieActions} from './types'\r\n\r\nexport default moviesReducer","import {combineReducers} from 'redux'\r\nimport actorsReducer from './app/actors/duck'\r\nimport moviesReducer from './app/movies/duck'\r\n\r\nconst rootReducer = combineReducers({\r\n    actors: actorsReducer,\r\n    movies: moviesReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools())\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}